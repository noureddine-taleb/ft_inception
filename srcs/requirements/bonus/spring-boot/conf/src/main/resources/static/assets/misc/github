why do you want to work at github ?

 first of all I am fullstack developer, I worked with many stacks in the past including mean/lamp/elk stacks and as server administration to manage and scale the linux servers, and I am always motivated to learn new technology and meet other talented devs, and share knowledge. and I love to work with git I even know some of its internals and its data structures and I was amazed of its simple but elegant design that still provide high performance even in big projects such as linux kernel, that changes source management control and the open source forever, that makes me passionate about open source, so working on one of the platforms that is powered by git and in turn powers open source is a dream for me. and will help me expand my knowledge, about git and how github harvested its power, and I would be very glad to work closely with such a platform, and help github and open source grow and be part of it.

What do you think are some of the challenges of working remotely, and how would you address them?  *

I think coordination is the challenge, we typically avoid this problem by not working on the same problem at the same time, but if it is necessary we split the task into smaller subtasks, and each developer work on a chunk


Tell us about a cool program or project youâ€™ve used or seen that takes both infrastructure design and software engineering concepts into consideration. What is it and why did you think it was really interesting/cool? *

one of my favorite project is linux kernel, I am always amazed on how it works, and how it manages computer hardware and provide an abstraction to programs to access those resources, using a clean portable system call interface, following the Superior unix design, by representing everything as a file, and I was surprised on how diverse the hardware and architectures it supports, and how flexible and modular its design is, which allow it to run in a wide spectrum of platforms from embedded devices to super computers to mars rovers, another interesting thing about linux is it's very large vibrant community that collaborate together to develop this peace of art for over 30 years, proving how much that software is stable and mature.


Tell us about an application that you helped to develop and maintain that made it to production. What were some scale and system-related considerations you had to work through? *

one of the projects I worked on the past was https://fink.ma, we successfully launch beta version, and everything seems to work well, and all tests are passed but when we launch our compaigns, and start getting a big number of users, the application performace decrease, it becomes slower to load, and some times it goes down, so we have to dig deeper to find root causes and fix them, some of the bottlenecks spoted are: 
 - small amount of RAM
 - extensive disk access
 - large network traffic
 - single point of failure
to address the first issue we increase the available ram, and create a swap file on an ssd drive, this fixes the problem of the frequent app crashing. to fix the second issue we have to optimise filesystem access so we move the app into tmpfs wich is a filesystem based on memory, that gives a much higher performance, but there is another problem if the host goes down our artifacts(files uploaded by users) will be wiped out, so we created a backup script that is triggered on every upload. for the last issues we tried to make the app more distributed by spawning multiple vps and put a reverse proxy in front to load balance the traffic between those hosts. the results was more robust and stable production app.


Pick a feature or screen of a developer tool you use and tell us how you'd make it better. What problems do you see with the current approach? What challenges do you anticipate in implementing the improvement? For example, you could choose your favorite editor, git client, or GitHub itself. *

I spent a lot of time trying to tune my linux system to get until the last drop of performance out of it, so I started from user space, and I find that the traditional linux distros shipped with a lot of tools and programs and services that I may never use, so I switched to archlinux that lets you install all the things you need, and don't force users to install anything else, that allows me to know all the components on my system, and tune my machine for the best development environment possible, the results was full control over what is runing on the system and when as a consequence the system was really minimum and does exactly what it should with no string attached, the second peace to full tune the linux system is the kernel, because the default stock kernel comes with support for a wide different hardwares, and a lot of modules and filesystems that will never be used, so I cloned my kernel from torvalds tree, and customize it to support only the hardware I have, and exclude everything else. the final product was a really tuned system that boots very fast, and have all the dev tools I use day to day, with a very good performance, and low resource utilization, the system was quiet and cool all the time.  


Describe a time when you advocated for a change that was important to the community or your team. What was it? Why was it so important? How did you approach the subject with your team? Was it successful? Why or why not? *


when I was working on https://winnr.gg wich built in the MEAN stack, I find that they are using server side rendering to get better seo, which works fine, as long as it is about seo, but in the browser when you throttle the network and get the first contentful paint it was really mangled, and looks nothing like the actual page, usually users won't notice it because angular will quickly render the correct layout, but if you have a slow internet you will face the issue, so I discussed it with the team after investigating the cause, and found that we have to drop a library that we heavily rely on to render the layout and replace it with something else that support SSR, so I offered a simple solution, to replace the lib with traditional css classes that have close semantics to the old lib, so it will be easily adopted by the team, they liked the solution but they weren't ready to change the lib yet because it is used throw out the project, so I let them to still using it, and I will create a separate branch, to migrate the entire project to the new solution, and then drop the old lib from the dependencies to prevent anyone from using it again, it was a big challenge, because the layout should still look the same after the migration, luckily I successfully migrated the project and it still consistent like the old one, and everyone likes the results, and we merge it to development tree, and the SSR issue is fixed for good.
